{"version":3,"sources":["store.js","context/index.js","createComponent.js","traditional/index.js","App.js","serviceWorker.js","index.js"],"names":["form","updateFirstName","createEvent","changeFirstName","updateLastName","changeLastName","firstName","restoreEvent","faker","name","lastName","createForm","storeContexts","Map","storeProvider","createStore","storeConsumers","map","state","Array","from","values","store","createStoreConsumer","get","id","Provider","_ref","_ref2","Object","slicedToArray","Component","_ref3","children","react_default","a","createElement","value","pushStore","on","has","set","React","createContext","getState","StoreConsumers","watch","stores","console","log","StoreProvider","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","renderProp","es","components","props","inherits","createClass","key","useStore","useEffect","useContext","FirstNameInput","onChange","LastNameInput","createComponent","_class","_temp","RenderComponent","currentState","_unsubscribe","_hasUnmounted","subscribe","unsubscribe","_this2","setState","prevState","displayName","shortName","_","intervals","Set","startInterval","add","setInterval","stopAllIntervals","forEach","clearInterval","ids","nanoid","Boolean","window","location","hostname","match","search","qs","parse","ReactDOM","render","react","StrictMode","context_StoreProvider","className","onClick","context_FirstNameInput","context_LastNameInput","document","getElementById","traditional_FirstNameInput","traditional_LastNameInput","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd171236.chunk.js","sourcesContent":["import faker from \"faker\";\nimport { createStore, restoreEvent, createEvent } from \"effector\";\n\nconst createForm = () => {\n  const updateFirstName = createEvent();\n  const changeFirstName = createEvent();\n  const updateLastName = createEvent();\n  const changeLastName = createEvent();\n\n  const firstName = restoreEvent(updateFirstName, faker.name.firstName());\n  const lastName = restoreEvent(updateLastName, faker.name.lastName());\n\n  return {\n    updateFirstName,\n    changeFirstName,\n    updateLastName,\n    changeLastName,\n    firstName,\n    lastName\n  };\n};\n\nexport const form = createForm();\n","import React from \"react\";\nimport { createEvent, createStore } from \"effector\";\nimport { createStoreConsumer } from \"effector-react\";\nimport Composer from \"react-composer\";\nimport { form } from \"../store\";\n\nconst storeContexts = new Map();\nconst storeProvider = createStore(new Map());\nconst storeConsumers = storeProvider.map(state =>\n  Array.from(state.values())\n    .map(store => [\n      createStoreConsumer(store),\n      storeContexts.get(store.id).Provider\n    ])\n    .map(([Component, Provider]) => ({ children }) => {\n      return (\n        <Component>\n          {value => <Provider value={value}>{children()}</Provider>}\n        </Component>\n      );\n    })\n    .map(Component => <Component />)\n);\nconst pushStore = createEvent();\n\nstoreProvider.on(pushStore, (state, store) => {\n  if (state.has(store.id)) return state;\n  storeContexts.set(store.id, React.createContext(store.getState()));\n  return new Map(state.set(store.id, store));\n});\n\nconst StoreConsumers = createStoreConsumer(storeConsumers);\n\nstoreProvider.watch(stores => {\n  console.log(stores);\n});\n\nexport class StoreProvider extends React.Component {\n  renderProp = state => (\n    <Composer components={state}>{() => this.props.children}</Composer>\n  );\n  render() {\n    return <StoreConsumers>{this.renderProp}</StoreConsumers>;\n  }\n}\n\nfunction useStore(store) {\n  React.useEffect(\n    () => {\n      pushStore(store);\n    },\n    [store]\n  );\n  const state = React.useContext(\n    storeContexts.get(store.id) || React.createContext(store.getState())\n  );\n  return state;\n}\n\nexport const FirstNameInput = () => {\n  const state = useStore(form.firstName);\n  return <input onChange={form.changeFirstName} value={state} />;\n};\n\nexport const LastNameInput = () => {\n  const state = useStore(form.lastName);\n  return <input onChange={form.changeLastName} value={state} />;\n};\n","import * as React from \"react\";\n\nexport function createComponent(store, renderProp) {\n  return class RenderComponent extends React.Component {\n    static displayName = `${store.shortName}.RenderComponent`;\n\n    state = { currentState: store.getState() };\n\n    _unsubscribe = null;\n    _hasUnmounted = false;\n\n    componentDidMount() {\n      this.subscribe();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n      this._hasUnmounted = true;\n    }\n    subscribe() {\n      const callback = state => {\n        if (this._hasUnmounted) {\n          return;\n        }\n\n        this.setState(prevState => {\n          if (state === prevState.currentState) {\n            return null;\n          }\n          return { currentState: state };\n        });\n      };\n\n      const unsubscribe = store.subscribe(callback);\n\n      this._unsubscribe = unsubscribe;\n    }\n\n    unsubscribe() {\n      if (typeof this._unsubscribe === \"function\") {\n        this._unsubscribe();\n      }\n\n      this._unsubscribe = null;\n    }\n    render() {\n      return renderProp(this.props, this.state.currentState);\n    }\n  };\n}\n","import React from \"react\";\nimport { createComponent } from \"../createComponent\";\nimport { form } from \"../store\";\n\nexport const FirstNameInput = createComponent(form.firstName, (_, state) => {\n  return <input onChange={form.changeFirstName} value={state} />;\n});\n\nexport const LastNameInput = createComponent(form.lastName, (_, state) => {\n  return <input onChange={form.changeLastName} value={state} />;\n});\n","import React from \"react\";\n\nimport { createEvent } from \"effector\";\nimport faker from \"faker\";\nimport nanoid from \"nanoid\";\nimport { form } from \"./store\";\n\nimport * as Context from \"./context\";\nimport * as Traditional from \"./traditional\";\n\nlet intervals = new Set();\n\nconst startInterval = () => {\n  intervals.add(\n    setInterval(() => {\n      form.updateFirstName(faker.name.firstName());\n      form.updateLastName(faker.name.lastName());\n    }, 150)\n  );\n  intervals.add(\n    setInterval(() => {\n      form.updateFirstName(\"empty\");\n      form.updateLastName(\"empty\");\n    }, 500)\n  );\n};\n\nconst stopAllIntervals = () => intervals.forEach(clearInterval);\n\nconst ids = Array.from({ length: 50 }).map(() => nanoid());\n\nexport function ContextApp() {\n  return (\n    <React.StrictMode>\n      <Context.StoreProvider>\n        <div className=\"App\">\n          <button onClick={stopAllIntervals}>stop intervals</button>\n          <button onClick={startInterval}>start intervals</button>\n          <h1>Hello Context</h1>\n          {ids.map(key => (\n            <div key={key}>\n              <Context.FirstNameInput />\n              <Context.LastNameInput />\n            </div>\n          ))}\n          <h2>Start editing to see some magic happen!</h2>\n        </div>\n      </Context.StoreProvider>\n    </React.StrictMode>\n  );\n}\n\nexport function TraditionalApp() {\n  return (\n    <React.StrictMode>\n      <div className=\"App\">\n        <button onClick={stopAllIntervals}>pause</button>\n        <button onClick={startInterval}>play</button>\n        <h1>Hello Traditional</h1>\n        {ids.map(key => (\n          <div key={key}>\n            <Traditional.FirstNameInput />\n            <Traditional.LastNameInput />\n          </div>\n        ))}\n        <h2>Start editing to see some magic happen!</h2>\n      </div>\n    </React.StrictMode>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport qs from \"query-string\";\nimport \"./index.css\";\nimport { ContextApp, TraditionalApp } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst search = qs.parse(window.location.search);\n\nconsole.log(React);\n\nif (\"context\" in search) {\n  ReactDOM.render(\n    <React.ConcurrentMode>\n      <ContextApp />\n    </React.ConcurrentMode>,\n    document.getElementById(\"root\")\n  );\n} else {\n  ReactDOM.render(\n    <React.ConcurrentMode>\n      <TraditionalApp />\n    </React.ConcurrentMode>,\n    document.getElementById(\"root\")\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// import \"./hooks\";\n"],"sourceRoot":""}